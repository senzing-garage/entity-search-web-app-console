version: '3.3'
services:
  postgres:
    container_name: senzing-postgres
    environment:
#     See https://github.com/docker-library/docs/blob/master/postgres/README.md#environment-variables
      POSTGRES_DB: ${POSTGRES_DB:-G2}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    image: postgres:11.6
    networks:
      - sz-api-network
    ports:
      - 5432:5432
    restart: always
    volumes:
      - ${POSTGRES_DIR:-/var/lib/postgresql/data}:/var/lib/postgresql/data

  postgresinit:
    container_name: senzing-postgresql-init
    depends_on:
      - postgres
    environment:
      SENZING_DATABASE_URL: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-G2}"
      SENZING_SQL_FILE: /opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql
    image: senzing/postgresql-client:${SENZING_DOCKER_IMAGE_VERSION_POSTGRESQL_CLIENT:-1.0.0}
    networks:
      - sz-api-network
    restart: on-failure
    volumes:
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  senzing-poc-server:
    container_name: senzing-poc-server
    command:
      - -httpPort
      - "8250"
      - -bindAddr
      - all
      - -iniFile
      - /etc/opt/senzing/G2Module.ini
      - -allowedOrigins
      - "*"
      - -enableAdmin
#      - --debug
    depends_on:
      - postgres
    environment:
#     See https://github.com/senzing-garage/senzing-api-server#configuration
      SENZING_DATABASE_URL: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-G2}"
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      AWS_REGION: ${AWS_REGION}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      SENZING_SQS_QUEUE_URL: ${SENZING_SQS_QUEUE_URL}
    image: senzing/senzing-poc-server:${SENZING_DOCKER_IMAGE_VERSION_SENZING_POC_SERVER:-latest}
    networks:
      - sz-api-network
    ports:
      - 8250:8250
    restart: 'no'
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/3.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  senzing-webapp:
    image: senzing/entity-search-web-app:${SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP:-latest}
    container_name: senzing-webapp
#    command: "start:docker"
    depends_on:
      - senzing-poc-server
    environment:
      SENZING_API_SERVER_URL: "http://senzing-poc-server:8250"
      SENZING_WEB_SERVER_ADMIN_AUTH_MODE: NONE
      SENZING_WEB_SERVER_URL: "http://senzing-webapp:8251"
      SENZING_WEB_SERVER_PORT: 8251
      SENZING_WEB_SERVER_API_PATH: '/api'
      SENZING_CONSOLE_SERVER_URL: 'ws://localhost:8273'

    networks:
      - sz-api-network
#    volumes:
#      - '/app/node_modules'
    ports:
      - 8251:8251
      - 8255:8255

    restart: 'always'

  senzing-webapp-console:
    image: senzing/entity-search-web-app-console
    container_name: senzing-webapp-console
    depends_on:
      - senzing-webapp
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      SENZING_CONSOLE_SERVER_PORT: 8273

    networks:
      - sz-api-network
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/3.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing
    ports:
      - 8273:8273
    
    restart: 'no'

networks:
  sz-api-network:
